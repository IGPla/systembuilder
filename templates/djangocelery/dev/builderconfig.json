{
    "start": [
	{
	    "name": "remove old project",
	    "flag": "new",
	    "action": "runcommand",
	    "command": "rm -rf %(project_dir)s/code"
	},
	{
	    "name": "create project folder",
	    "flag": "new",
	    "action": "runcommand",
	    "command": "mkdir -p %(project_dir)s/code"
	},
	{
	    "name": "copy common system requirements (web)",
	    "flag": "always",
	    "action": "copyfile",
	    "fromfile": "%(template_dir)s/systemrequirements.txt",
	    "tofile": "%(template_dir)s/docker/web/common_systemrequirements.txt"
	},
	{
	    "name": "copy project system requirements (web)",
	    "flag": "always",
	    "action": "copyfile",
	    "fromfile": "%(project_dir)s/systemrequirements.txt",
	    "tofile": "%(template_dir)s/docker/web/project_systemrequirements.txt"
	},
	{
	    "name": "copy common python requirements (web)",
	    "flag": "always",
	    "action": "copyfile",
	    "fromfile": "%(template_dir)s/requirements.txt",
	    "tofile": "%(template_dir)s/docker/web/common_requirements.txt"
	},
	{
	    "name": "copy project python requirements (web)",
	    "flag": "always",
	    "action": "copyfile",
	    "fromfile": "%(project_dir)s/requirements.txt",
	    "tofile": "%(template_dir)s/docker/web/project_requirements.txt"
	},
	{
	    "name": "copy common system requirements (tasks)",
	    "flag": "always",
	    "action": "copyfile",
	    "fromfile": "%(template_dir)s/systemrequirements.txt",
	    "tofile": "%(template_dir)s/docker/tasks/common_systemrequirements.txt"
	},
	{
	    "name": "copy project system requirements (tasks)",
	    "flag": "always",
	    "action": "copyfile",
	    "fromfile": "%(project_dir)s/systemrequirements.txt",
	    "tofile": "%(template_dir)s/docker/tasks/project_systemrequirements.txt"
	},
	{
	    "name": "copy common python requirements (tasks)",
	    "flag": "always",
	    "action": "copyfile",
	    "fromfile": "%(template_dir)s/requirements.txt",
	    "tofile": "%(template_dir)s/docker/tasks/common_requirements.txt"
	},
	{
	    "name": "copy project python requirements (tasks)",
	    "flag": "always",
	    "action": "copyfile",
	    "fromfile": "%(project_dir)s/requirements.txt",
	    "tofile": "%(template_dir)s/docker/tasks/project_requirements.txt"
	},
	{
	    "name": "build docker web dev",
	    "flag": "always",
	    "action": "runcommand",
	    "command": "%(composer_base_command)s build web_dev"
	},
	{
	    "name": "build docker tasks dev",
	    "flag": "always",
	    "action": "runcommand",
	    "command": "%(composer_base_command)s build tasks_dev"
	},
	{
	    "name": "create django project",
	    "flag": "new",
	    "action": "runcommand",
	    "command": "%(composer_base_command)s run web_dev django-admin.py startproject %(project_name)s ."
	},
	{
	    "name": "initialize database setting",
	    "flag": "new",
	    "action": "replacement",
	    "file": "%(project_dir)s/code/%(project_name)s/settings.py",
	    "replace": {
		"DATABASES": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql', \n        'HOST': 'db_dev', \n        'NAME': 'postgres', \n        'PORT': 5432, \n        'USER': 'postgres'\n    }\n}",
		"ALLOWED_HOSTS": "ALLOWED_HOSTS = ['*']"
	    }
	},
	{
	    "name": "create celery config file",
	    "flag": "new",
	    "action": "append",
	    "file": "%(project_dir)s/code/%(project_name)s/celery.py",
	    "filecontent": "\nfrom __future__ import absolute_import, unicode_literals\nimport os\nfrom celery import Celery\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', '%(project_name)s.settings')\napp = Celery('%(project_name)s')\napp.config_from_object('django.conf:settings', namespace='CELERY')\napp.autodiscover_tasks()"
	},
	{
	    "name": "add __init__.py celery imports",
	    "flag": "new",
	    "action": "append",
	    "file": "%(project_dir)s/code/%(project_name)s/__init__.py",
	    "filecontent": "\nfrom __future__ import absolute_import, unicode_literals\nfrom .celery import app as celery_app\n__all__ = ['celery_app']"
	},
	{
	    "name": "add basic celery config in settings",
	    "flag": "new",
	    "action": "append",
	    "file": "%(project_dir)s/code/%(project_name)s/settings.py",
	    "filecontent": "\nCELERY_BROKER_URL = 'amqp://guest:guest@tasks_queue_dev:5672//'\nCELERY_RESULT_BACKEND = 'redis://tasks_results_dev:6379/0'"
	},
	{
	    "name": "fix docker compose tasks celery name",
	    "flag": "always",
	    "action": "replacement",
	    "file": "%(template_dir)s/docker-compose.yml",
	    "replace": {
		"command: celery": "    command: celery -A %(project_name)s worker --loglevel=info\n"
	    }
	}
    ],
    "afterstart": [
	{
	    "name": "run migrations",
	    "flag": "new",
	    "action": "runcommand",
	    "command": "%(composer_base_command)s run web_dev python3 manage.py migrate"
	}
    ]
}
